#!/bin/bash

declare -A attacks
attacks[sql_inj]="System/sql_inj.sh"
attacks[xss]="System/xss.sh"
attacks[ssh_force]="System/ssh_force.sh"
attacks[port_scan]="System/port_scan.sh"
attacks[dos]="System/dos.sh"
attacks[tcp_syn_flood]="System/tcp_syn_flood.sh"

declare -A attack_weights
attack_weights[sql_inj]=5
attack_weights[xss]=5
attack_weights[ssh_force]=5
attack_weights[port_scan]=5
attack_weights[dos]=5
attack_weights[tcp_syn_flood]=5

random_normal() {
    mean=$1
    stddev=$2
    awk -v mean="$mean" -v stddev="$stddev" 'BEGIN { 
        srand(); 
        r1 = rand(); r2 = rand();
        print int(mean + stddev * sqrt(-2 * log(r1)) * cos(2 * 3.141592 * r2));
    }'
}

select_attack() {
    total_weight=0
    for attack in "${!attack_weights[@]}"; do
        total_weight=$(( total_weight + attack_weights[$attack] ))
    done

    r=$(( RANDOM % total_weight ))
    cumulative=0
    for attack in "${!attack_weights[@]}"; do
        cumulative=$(( cumulative + attack_weights[$attack] ))
        if (( r < cumulative )); then
            echo "$attack"
            return
        fi
    done
}

total_time=$((60 * 60)) 
attack_times=()
time_elapsed=0

while (( time_elapsed < total_time )); do
    inter_arrival=$(random_normal 180 60)
    if (( inter_arrival < 30 )); then inter_arrival=30; fi
    time_elapsed=$(( time_elapsed + inter_arrival ))
    if (( time_elapsed < total_time )); then
        attack_times+=("$time_elapsed")
    fi
done

for attack_time in "${attack_times[@]}"; do
    sleep_time=$(( attack_time - SECONDS )) 
    if (( sleep_time > 0 )); then
        sleep "$sleep_time"
    fi

    selected_attack=$(select_attack)
    echo "[$SECONDS] Starting attack: $selected_attack (${attacks[$selected_attack]})"
    bash "${attacks[$selected_attack]}"

    for attack in "${!attack_weights[@]}"; do
        if [[ "$attack" == "$selected_attack" ]]; then
            attack_weights[$attack]=$(( attack_weights[$attack] / 2 )) 
        else
            attack_weights[$attack]=$(( attack_weights[$attack] + 1 ))  
        fi
    done

    attack_duration=$(random_normal 20 10) 
    if (( attack_duration < 5 )); then attack_duration=5; fi 
    sleep "$attack_duration"
done
