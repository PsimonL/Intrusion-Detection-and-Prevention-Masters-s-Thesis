import time
import random
import subprocess
import math

def random_poisson(lambda_val, scale_factor):
    L = math.exp(-lambda_val)
    k = 0
    p = 1.0
    while p > L:
        k += 1
        p *= random.random()
    return max(int(k * scale_factor), scale_factor)  # Time scaling to min. scale_factor seconds

def random_normal(mean, stddev):
    r1, r2 = random.random(), random.random()
    return max(int(mean + stddev * math.sqrt(-2 * math.log(r1)) * math.cos(2 * math.pi * r2)), 5)

def select_attack(attack_weights):
    total_weight = sum(attack_weights.values())
    r = random.randint(0, total_weight - 1)
    cumulative = 0
    for attack, weight in attack_weights.items():
        cumulative += weight
        if r < cumulative:
            return attack

def execute_attack(selected_attack, attacks, attack_number):
    current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    print(f"Attack #{attack_number}: {selected_attack} ({attacks[selected_attack]}) at {current_time}")
    subprocess.run(["bash", attacks[selected_attack]])

def update_weights(attack_weights, selected_attack):
    for attack in attack_weights:
        if attack == selected_attack:
            attack_weights[attack] = max(1, attack_weights[attack] // 2)
        else:
            attack_weights[attack] += 1

def main(attacks, initial_weight, total_time, lambda_val, scale_factor, mean, stddev):
    attack_weights = {attack: initial_weight for attack in attacks}
    start_time = time.time()
    start_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(start_time))
    print(f"Simulation started at: {start_time_str}")

    attack_number = 0

    while time.time() - start_time < total_time:
        inter_attack_time = random_poisson(lambda_val, scale_factor)
        time.sleep(inter_attack_time)

        attack_number += 1
        selected_attack = select_attack(attack_weights)
        execute_attack(selected_attack, attacks, attack_number)
        update_weights(attack_weights, selected_attack)

        attack_duration = random_normal(mean, stddev)
        time.sleep(attack_duration)

    end_time = time.time()
    end_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(end_time))
    print(f"Simulation ended at: {end_time_str}")

if __name__ == "__main__":
    attacks = {
        "sql_inj": "WebApp/sql_inj.sh",
        "xss": "WebApp/xss.sh",
        "ssh_force": "System/ssh_force.sh",
        "port_scan": "System/port_scan.sh",
        "dos": "System/dos.sh",
        "tcp_syn_flood": "System/tcp_syn_flood.sh"
    }
    main(attacks, initial_weight=5, total_time=3600, lambda_val=0.005, scale_factor=30, mean=15, stddev=5)
